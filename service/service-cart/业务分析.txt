购物车：
  1、查询+增删改都多的功能； 数据库来存储：数据库压力大。
  2、只用数据库不合适。  加入购物车 = 数据库（异步写库）+ 缓存（同步写缓存）
  3、购物车数据只是用户维度的数据。购物车没有复杂查询；无需结构化数据。
        数据结构：每个商品数据结构有细微变化，购物车保存的是每一个商品
        数据库如何设计：
            cart_info: 购物车信息表
                id   sku_id  user_id  check_status   num
                1      49     3           1           2
                2      49     4           1           2
                3      50    5727597      1           2

  4、Redis持久化机制。直接使用redis。redis查询任何数据时间复杂度O(1)；
  综合考虑：
    购物车设计：
    1）、存储层直接使用redis进行存储。并开启持久化机制即可。数据量太大就用redis集群
            （不用：主从复制+哨兵； 就用：redis-cluster[主从复制+哨兵+分片]）
        线上没有权限。
    2）、数据结构设计

业务：
1、用户即使没登录，也可以使用购物车；数据也是持久化存储的；
    用户没登录。会给一个临时购物车的id：
2、用户登录了。
    如果用户一登录，会把临时购物车的数据搬家到用户的购物车。临时数据删除
3、业务功能
    1）、展示购物车中所有商品
    2）、改变商品选中状态
    3）、修改商品数量
    4）、删除购物车
    5）、加入购物车




特性：
1、购物车的数据给哪里存，怎么存？

商品数据查询多：数据库持久化+缓存加速查询